---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  VITE_BUILD_RELEASE: "$CI_COMMIT_TAG"
  VITE_BUILD_HASH: "$CI_COMMIT_SHA"
  VITE_BUILD_TIME: "$CI_COMMIT_TIMESTAMP"

  DEPLOY_USER: felnne
  DEPLOY_HOST: bslcenb.nerc-bas.ac.uk
  DEPLOY_PATH: /users/felnne/public_html/apps/zap
  DEPLOY_REVIEW_APP_PREFIX: review
  DEPLOY_URL_BASE: http://basweb.nerc-bas.ac.uk/~felnne/apps/zap

image:
  name: node:lts-alpine

cache:
  paths:
    - node_modules/

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 🚀 deploy

before_script:
  - npm ci

.before_script_deploy_template: &before_script_deploy
  before_script:
    - apk add --no-cache rsync openssh-client
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

lint:
  stage: 📋 lint
  needs: []
  script:
    - npm run test:lint
    - npm run test:types
    - npm run test:format
  rules:
    # Only run on merge requests
    - if: '$CI_MERGE_REQUEST_ID != null'

test_unit:
  stage: 🧪 test
  needs: []
  script:
    - npx vitest --reporter=junit --outputFile=./test-results.xml
  artifacts:
    when: always
    reports:
      junit: test-results.xml
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

test_e2e:
  stage: 🧪 test
  needs: []
  image: mcr.microsoft.com/playwright:v1.40.0-jammy
  variables:
    PLAYWRIGHT_JUNIT_OUTPUT_NAME: test-results.xml
  before_script:
    - npm ci
    - npx playwright install
    - npm run build:only
  script:
    - npx playwright test --project chromium
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - playwright_screenshots/
    when: always
    expire_in: 1 month
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

build:
  stage: 🏗 build
  needs: []
  script:
    - npm run build:only
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  rules:
    -
      if: '$CI_COMMIT_TAG == null'

deploy:
  stage: 🚀 deploy
  needs: ["build"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA"
    - rsync -avz dist/* $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/$CI_COMMIT_SHORT_SHA
  rules:
    -
      if: '$CI_COMMIT_TAG == null'

deploy_int:
  stage: 🚀 deploy
  needs: ["deploy"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/integration"
  environment:
    name: Integration
    url: $DEPLOY_URL_BASE/integration
  rules:
    -
      if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'

deploy_prod:
  stage: 🚀 deploy
  needs: []
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/$CI_COMMIT_TAG"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_TAG $DEPLOY_PATH/prod"
  environment:
    name: Production
    url: $DEPLOY_URL_BASE/prod
  rules:
    -
      if: '$CI_COMMIT_TAG != null'

review:
  stage: 🚀 deploy
  needs: ["deploy"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG"
  environment:
    name: Review/$CI_COMMIT_REF_NAME
    url: $DEPLOY_URL_BASE/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG
    on_stop: review_stop
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

review_stop:
  stage: 🚀 deploy
  variables:
    GIT_STRATEGY: none
  when: manual
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "rm $DEPLOY_PATH/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG"
  environment:
    name: Review/$CI_COMMIT_REF_NAME
    action: stop
