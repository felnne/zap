---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  VITE_BUILD_RELEASE: "$CI_COMMIT_TAG"
  VITE_BUILD_HASH: "$CI_COMMIT_SHA"
  VITE_BUILD_TIME: "$CI_COMMIT_TIMESTAMP"
  TEST_AGOL_USERNAME: "app_automated_testing_bas"
  DEPLOY_USER: felnne
  DEPLOY_HOST: bslcenb.nerc-bas.ac.uk
  DEPLOY_SSH_PRIVATE_KEY: "/root/.ssh/id_ed25519.pem"
  DEPLOY_PATH: /users/felnne/public_html/apps/zap
  DEPLOY_REVIEW_APP_PREFIX: review
  DEPLOY_URL_BASE: https://basweb.nerc-bas.ac.uk/~felnne/apps/zap
  # Secrets (set in GitLab CI/CD settings)
  # - OP_SERVICE_ACCOUNT_TOKEN
  #   - https://start.1password.com/open/i?a=QSB6V7TUNVEOPPPWR6G7S2ARJ4&v=k34cpwfkqaxp2r56u4aklza6ni&i=xycz7i532uhb37kum3ypnqnhg4&h=magic.1password.eu
  # - TEST_AGOL_PASSWORD
  #   - https://start.1password.com/open/i?a=QSB6V7TUNVEOPPPWR6G7S2ARJ4&v=ffy5l25mjdv577qj6izuk6lo4m&i=bq44kugbwpn5ldfoslpkskhm5a&h=magic.1password.eu

image:
  name: node:lts-alpine

cache:
  paths:
    - node_modules/

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 📦 package
  - 🚀 deploy

before_script:
  - npm ci

.before_script_validate_template: &before_script_validate
  before_script:
    - npx tsc scripts/validate-data.ts
    - mv scripts/validate-data.js scripts/validate-data.cjs

.before_script_package_template: &before_package_deploy
  before_script:
    - apk add --no-cache zip curl
    # remove `v` from tag as GitLab doesn't allow prefixes
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/273034 for details
    - export VERSION_NO_PREFIX=$(echo $CI_COMMIT_TAG | sed 's/^v//')"
    - export PACKAGE_VERSION=$VERSION_NO_PREFIX
    - export PACKAGE_FILE_NAME=zap-app-$PACKAGE_VERSION.zip

.before_script_deploy_template: &before_script_deploy
  before_script:
    - apk add --no-cache wget zip
    - echo https://downloads.1password.com/linux/alpinelinux/stable/ >> /etc/apk/repositories
    - wget https://downloads.1password.com/linux/keys/alpinelinux/support@1password.com-61ddfc31.rsa.pub -P /etc/apk/keys
    - apk add --no-cache 1password-cli rsync openssh-client
    - op --version

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - op read --out-file $DEPLOY_SSH_PRIVATE_KEY "op://Infrastructure/Zap - GitLab CI private key/private key?ssh-format=openssh"
    - eval $(ssh-agent -s)
    - chmod 400 "$DEPLOY_SSH_PRIVATE_KEY"
    - ssh-add "$DEPLOY_SSH_PRIVATE_KEY"

    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

lint:
  stage: 📋 lint
  needs: []
  script:
    - npm run test:eslint
    - npm run test:types
    - npm run test:format
  rules:
    # Only run on merge requests
    - if: '$CI_MERGE_REQUEST_ID != null'

validate:
  stage: 📋 lint
  needs: []
  <<: *before_script_validate
  script:
    - node scripts/validate-data.cjs
  rules:
    # Only run on merge requests
    - if: '$CI_MERGE_REQUEST_ID != null'

test_unit:
  stage: 🧪 test
  needs: []
  script:
    - npx vitest --reporter=junit --outputFile=./test-results.xml
  artifacts:
    when: always
    reports:
      junit: test-results.xml
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

test_e2e:
  stage: 🧪 test
  needs: []
  image: mcr.microsoft.com/playwright:v1.40.0-jammy
  variables:
    PLAYWRIGHT_JUNIT_OUTPUT_NAME: test-results.xml
  before_script:
    - npm ci
    - npx playwright install
    - npm run build:only
  script:
    - npx playwright test --project chromium
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - playwright_screenshots/
    when: always
    expire_in: 1 week
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

build:
  stage: 🏗 build
  needs: []
  script:
    - npm run build:only
  artifacts:
    paths:
      - dist/
    expire_in: 1 month

package_prod:
  stage: 📦 package
  needs:
    - job: build
      artifacts: true
  script:
    - zip -r $PACKAGE_FILE_NAME dist
    - 'curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_FILE_NAME ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/app/$PACKAGE_VERSION/$PACKAGE_FILE_NAME'
  rules:
    -
      if: '$CI_COMMIT_TAG != null'

deploy:
  stage: 🚀 deploy
  needs:
    - job: build
      artifacts: true
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA"
    - rsync -avz dist/* $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/$CI_COMMIT_SHORT_SHA

deploy_int:
  stage: 🚀 deploy
  needs: ["deploy"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/integration"
  environment:
    name: Integration
    url: $DEPLOY_URL_BASE/integration
  rules:
    -
      if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'

deploy_prod:
  stage: 🚀 deploy
  needs: ["deploy"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/$CI_COMMIT_TAG"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_TAG $DEPLOY_PATH/prod"
  environment:
    name: Production
    url: $DEPLOY_URL_BASE/prod
  rules:
    -
      if: '$CI_COMMIT_TAG != null'

review:
  stage: 🚀 deploy
  needs: ["deploy"]
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "ln -snf $DEPLOY_PATH/$CI_COMMIT_SHORT_SHA $DEPLOY_PATH/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG"
  environment:
    name: Review/$CI_COMMIT_REF_NAME
    url: $DEPLOY_URL_BASE/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG
    on_stop: review_stop
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

review_stop:
  stage: 🚀 deploy
  variables:
    GIT_STRATEGY: none
  when: manual
  <<: *before_script_deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "rm $DEPLOY_PATH/$DEPLOY_REVIEW_APP_PREFIX-$CI_COMMIT_REF_SLUG"
  environment:
    name: Review/$CI_COMMIT_REF_NAME
    action: stop
  rules:
    -
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'
